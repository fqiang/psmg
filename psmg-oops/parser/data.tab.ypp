/* (c) Feng Qiang and Andreas Grothey, University of Edinburgh
 *
 * This file is part of SML.
 *
 * SML is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, using version 3 of the License.
 *
 * SML is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 */

%debug
%{
 	#include "../util/util.h"
   	#include "../context/Set.h"
	#include "../context/ModelContext.h"
	#include "../context/PValueSym.h"
	#include "../context/PValueValue.h"
   	#include "../context/ParamMult.h"
   	#include "../context/ParamSingle.h"
   	#include "../model/AmplModel.h"
   	#include "../model/ModelComp.h"
   	#include "../model/ParamComp.h"
   	#include "../model/SetComp.h"
   	#include <cstdlib>
   	#include <iostream>
   	#include <sstream>
   	#include <errno.h>

   	#define YYERROR_VERBOSE

   	using namespace std;

   	int datalex(void);
   	static void dataerror(const char *s);
   	void add_param_spec_item(const string& );
   	
   	extern FILE *datain;
   	extern int datalineno;
   	ModelContext* rootContext;
  
  	SetComp* curr_setcomp;
   	Set* curr_set;
   	ParamComp* curr_paramcomp;
   	Param* curr_param; 
   	vector<ParamComp*> curr_paramcomps;
   	vector<Param*> curr_params;
   	string param_indicies_key;
   	int param_index;
   	int ind_req;
   	int ind_consumed;
%}

%union
{
   long ival;
   double fval;
   char* string;
 
}

%type <string> set_name  
%type <string> set_value
%type <string> set_tuple
%type <string> set_item


%type <string> param_name 
%type <string> param_spec_item 
%type <string> param_value


%token <string> ID 
%token <string> INT
%token <string> FLOAT 

%token DATA
%token SET PARAM TR
%token DEFINE
%token PLUS MINUS DOT SEMICOLON COLON 
%token LBRACE RBRACE LSBRACKET RSBRACKET LBRACKET RBRACKET
%token COMMA


%nonassoc SEMICOLON

%%

statements: /* empty */
          	| statements statement 
          	;

statement:  set_def
			| param_def
			| DATA SEMICOLON {
				YAC("data rule matched");
			}
         	;

set_def:	SET set_name DEFINE set_value_list SEMICOLON 
			{
				rootContext->addCompValueMap(curr_setcomp,curr_set);
				curr_setcomp = NULL;
				curr_set = NULL;
        	}
			;            

set_name:	ID {
				YAC("create set for "<<$1); 
				string id($1);
				curr_setcomp = AmplModel::root->findSetComp(id);
				curr_set = Set::createSet(curr_setcomp);
				assert(curr_setcomp->setDim == 1); //only 1-dim set can be specified in this grammar
				$$ = $1;
			}
			;

set_value_list:	set_value {
				//YAC("member_items["<<$1<<"]"); 
				curr_set->addSetValue($1); 
			}
			| set_value_list set_value {
				curr_set->addSetValue($2); 
			}
			;
			
set_value: LBRACKET set_tuple RBRACKET  { 
				$$ = $2;
			}
			| set_item {
				$$ = $1;
			}
			;

set_tuple: 	set_tuple COMMA set_item
			{
				ostringstream oss;
				oss<<$3<<","<<$1;
				$$ = strdup(oss.str().c_str());
			}
			|
			set_item
			{
				$$ = $1;
			}
			;
			
set_item: 	ID
			{ 
				$$ = $1;
			}
			| INT {
				$$ = $1;
			}
			;
/*******************************************************************************
 *
 * For specifiying parameter data
 *
 *****************************************************************************/
param_def:	PARAM param_name DEFINE param_value SEMICOLON { 
				YAC("single params define start -- "<<$2);
				assert(curr_paramcomp->numIndicies == 0);
				
				PValue* pval = NULL;
				if(curr_paramcomp->isSym){
					string v($4);
					pval = new PValueSym(v);
				}
				else
				{
					pval = new PValueValue(atof($4));
	            }
	            
	            static_cast<ParamSingle*>(curr_param)->setParamValue(pval);
	            assert(curr_param->card == 1);
                rootContext->addCompValueMap(curr_paramcomp,curr_param);
                curr_paramcomp = NULL;
                curr_param = NULL;
			}
			| PARAM COLON set_name COLON param_names 
			{ 
				ind_req =  curr_params[0]->numIndicies;
			}
			DEFINE set_param_specs SEMICOLON 
			{
				YAC("multiple params define start -- with set");
				YAC("set : "<<$3);
				rootContext->addCompValueMap(curr_setcomp,curr_set);
				
				for(uint i=0;i<curr_paramcomps.size();i++)
				{
					rootContext->addCompValueMap(curr_paramcomps[i],curr_params[i]);
				}
				curr_setcomp = NULL;
				curr_set = NULL;
				curr_paramcomps.clear();
				curr_params.clear();
				curr_paramcomp == NULL;
				curr_param == NULL;
			}
			| PARAM COLON param_names 
			{ 
				ind_req =  curr_params[0]->numIndicies;
			}
			DEFINE set_param_specs SEMICOLON 
			{
				YAC("multiple params define start - num param "<<curr_paramcomps.size());
				
				for(int i=0;i<curr_paramcomps.size();i++)
				{
					rootContext->addCompValueMap(curr_paramcomps[i],curr_params[i]);
				}
				assert(curr_setcomp == NULL && curr_set == NULL);
				curr_paramcomps.clear();
				curr_params.clear();
				curr_paramcomp == NULL;
				curr_param == NULL;
			}
			;


param_name:	ID {
				string id($1);
				curr_paramcomp = AmplModel::root->findParamComp(id);
				curr_param = Param::createParam(curr_paramcomp);
				$$ = $1;
			}
			;	

param_names: param_name {
				YAC(" -- param_name last --  ");
				curr_paramcomps.push_back(curr_paramcomp);
				curr_params.push_back(curr_param);
				assert(curr_params.size()==0 || curr_params[0]->numIndicies == curr_param->numIndicies);
			}
			|	param_names param_name {	
				YAC(" -- param_name recur --  ");	
				curr_paramcomps.push_back(curr_paramcomp);
				curr_params.push_back(curr_param);
				assert(curr_params.size()==0 || curr_params[0]->numIndicies == curr_param->numIndicies);
			}
			;

set_param_specs: param_spec_item { 
					YAC(" set_param_specs -- last - ");
					add_param_spec_item($1);	
				}
				|	set_param_specs param_spec_item  { 
					YAC(" set_param_specs -- recur - ");
					add_param_spec_item($2 );
				}
				;

param_spec_item: param_value { $$ = $1; }
				;

			
param_value: ID {
				$$ = $1;
			}
			| INT {
				$$ = $1;
			}
			| FLOAT {
				$$ = $1;
			}
			;



%%

void dataerror(const char *s) {
  cerr << "INPUT:[" << s << "] on line " << datalineno << "\n";
  exit(1);
}

void parse_data(ModelContext* context) {
       
	YAC("===============================================================");
	YAC(" Start parsing data file: " << GV(datafilename));
	YAC("===============================================================");
	rootContext = context;
  	datain = fopen(GV(datafilename).c_str(), "r");
  	if (datain==NULL){
    	printf("ERROR: Data file '%s' error:%s \n",GV(datafilename).c_str(),strerror(errno));
    	exit(1);
  	}
  	curr_param = NULL;
  	curr_paramcomp = NULL;
  	curr_setcomp = NULL;
  	curr_set = NULL;
  	curr_params.clear();
  	curr_paramcomps.clear();
  	param_indicies_key = "";
    ind_req = 0;
    ind_consumed = 0;
    param_index =0;
        
  	dataparse();
  	YAC("===============================================================");
  	YAC(" Finished parsing data file");
  	YAC("===============================================================");
	fclose(datain);
}

void add_param_spec_item(const string& item )
{
	YAC("-- in - add_param_spec_item - "<<item<<" - "<<param_indicies_key );
	//first computing the number of indices required for current param
	if(ind_consumed < ind_req)
	{
		param_indicies_key += item;
		
		ind_consumed++;
		if(ind_consumed==ind_req) {
			if(curr_set!=NULL) curr_set->addSetValue(param_indicies_key);
			param_index = 0;	
		}
	}
	else
	{
		assert(ind_consumed == ind_req);
		PValue* pval = NULL;
		ParamComp* pc = curr_paramcomps[param_index];
		if(pc->isSym) pval = new PValueSym(item);
		else  pval = new PValueValue(atof(item.c_str()));
		ParamMult* p = static_cast<ParamMult*>(curr_params[param_index]);
		p->addParamValue(param_indicies_key,pval);
		assert(param_index<=curr_params.size());
		
		param_index++;
		if(param_index==curr_params.size()) {
			param_index = 0;
			ind_consumed = 0;
			param_indicies_key = "";
		}
	}
}

static void print_token_value (FILE *file, int type, YYSTYPE value)
{
	fprintf (file, "%s", value.string);
}


//main(int argc,char** argv )
//{
// 	++argv, --argc;  /* skip over program name */
// 	if ( argc > 0 )
// 	{
//	   	datain = fopen( argv[0], "r" );
//  }
// 	else
// 	{
//     	datain = stdin;
//  }
//	
//	while(dataparse());
//}

