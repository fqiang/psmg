/* (c) 2008,2009 Jonathan Hogg and Andreas Grothey, University of Edinburgh
 *
 * This file is part of SML.
 *
 * SML is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, using version 3 of the License.
 *
 * SML is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 */
%debug

%{
   #define YYERROR_VERBOSE
   #include <stdio.h>
   #include <stdlib.h>
   #include <assert.h>
   #include <iostream>
   #include "../model/SyntaxNode.h"
   #include "../model/SyntaxNodeIx.h"
   #include "../model/OpNode.h"
   #include "../model/IDNode.h"
   #include "../model/ValueNode.h"
   #include "../model/SyntaxNodeIDREF.h"
   #include "../model/AmplModel.h"
  
   #include "../st_model/StochModel.h"
   #include "../st_model/StochModelComp.h"
   
   #include "../sml/GlobalVariables.h"
   #include "../util/global_util_functions.h"

   using namespace std;

   void add_indexing(SyntaxNodeIx *indexing);
   void rem_indexing(SyntaxNodeIx *indexing);
   void begin_model(char *name, SyntaxNodeIx *indexing);
   void end_model(char *name);
   void begin_smodel(char *name, SyntaxNodeIx *indexing, SyntaxNode *stochsets);
   void end_smodel(char *name);

   extern int yylineno;
   int yylex(void);
   void yyerror(const char *s);

   static AmplModel *current_model;    /* this is the model currently active */
                                       /* this is the GLOBAL context */
   SyntaxNodeIx *list_of_indexing[20];    /* list of currently applicable 
                                                indexing expressions */
   int n_indexing;
   /* ---------------- stochastic global variables:------------------------ */
   static bool is_stoch_model;      /* true if inside stochastic model def */
   /* these are set by global stocastic modifier commands */
   static bool is_deterministic_glo;
   static SyntaxNode *stages_glo;
   extern FILE *yyin;

   void addStochInfo(ModelComp *newmc, SyntaxNode*);
%}

%union
{
  int optype;
  compType ctype;
  long *ival;
  double *fval;
  char *string;
  SyntaxNode *opPtr;
  SyntaxNodeIx *opPtrIx;
}

%type <string> setdef paramdef vardef cnstr
%type <opPtr> expr value  expr_list /*equation*/  
%type <opPtr> stochattr_opt 
%type <opPtr> setattributes_opt setattribute /*setattributes*/
%type <opPtr> paramattributes_opt paramattribute /*paramattributes*/
%type <opPtr> varattributes_opt varattributes varattribute
%type <opPtr> setexpr_list lexpr 
%type <opPtr> setexpression identifier iditem setexpr_item /*mdim_dummy_start*/
%type <opPtr> mdim_dummy mdim_dummy_list indexing_condition /*start_indexing*/
%type <opPtrIx> indexing_opt indexing  
%type <optype> relop reduction_op func_op ubsetop bsetop blogic_op ulogic_op b_compare_op 
%type <ctype> cnstr_type

%token <string> ID 
%token <ival> INT_VAL
%token <fval> FLOAT_VAL 
%token INFINITE COEFF COVER OBJ DEFAULT FROM TO TO_COME MODELTYPE DOTDOT
%token NET_IN NET_OUT DIMEN ORDERED CIRCULAR REVERSED SYMBOLIC ARC
%token INTEGER BINARY CHECK CLOSE DISPLAY DROP INCLUDE PRINT PRINTF QUIT RESET
%token RESTORE SOLVE UPDATE WRITE SHELL MODEL DATA OPTION LET SOLUTION FIX
%token UNFIX END FUNCTION PIPE FORMAT SETOF BY LESS MOD DIV MIN MAX IF THEN
%token ELSE AND OR EXISTS FORALL NOT WITHIN WHILE REPEAT FOR CARD NEXT NEXTW
%token PREV PREVW FIRST LAST MEMBER ORD ORD_ZERO VAR PARAM SET MAXIMIZE MINIMIZE
%token OBJECTIVE SUBJECTTO SUM PROD IN POWER NE LE GE EQ LT GT SIN COS UNION DIFF
%token CROSS INTER SYMDIFF LBRACE RBRACE COMMA SEMICOLON LSBRACKET RSBRACKET
%token COLON LBRACKET RBRACKET DEFINED /* LOGICAL_OR LOGICAL_AND  ELLIPSE */
%token DOT SUFFIX BLOCK IDREF IDREFM STAGE NODE
/*%token PUBLIC RANDOM SBLOCK BEG TIMESTAGE */
%token USING DETERMINISTIC EXPECTATION STOCHASTIC STAGES
%token ANCESTOR

%left OR
%left AND
%left EQ NE
%left LT LE GT GE
%left '+' '-'
%left '*' '/'
%right ASSIGN
%right DEFINED
%right SUM
%right POWER
%left '!'
%left DOTDOT

%%
statements: /* empty */
          | statements statement 
          ;

block:   stochblock
     |   blockblock
     |   stageblock
     ;
         
/* -------------------------------------------------------------------- 
  blockblock
------------------------------------------------------------------------- */
/* A blockblock is a block definition of the form

     block name{indexing}:
       statements
     end block;
*/

blockblock: BLOCK ID indexing_opt COLON {   
				YAC_MODEL_LOG("blockblock: BLOCK ID indexing_opt COLON LBRACE statements RBRACE --- rule matched!");
				add_indexing($3);
				begin_model((char*)$2,$3);
			}
			LBRACE statements RBRACE 
			{
               	end_model((char*)$2);
               	rem_indexing($3);
            }
          ;
         
/* -------------------------------------------------------------------- 
  stochblock
------------------------------------------------------------------------- */
/* A stochblock is a block definition of the form

     [sblock/stochastic block] name{indexing} using (NODES,ANC,PROB,STAGES):
       statements
     end sblock;

where 
  NODES: set of nodes in the tree
  ANC{NODES}: ancestor for every node
  PROB{NODES}: conditional probability of reaching this node from parent
  STAGES: set of time stages 

  The whole block is repeated over all STAGES (actually over all NODES). 
  Entities marked 'deterministic' are only repeated over STAGES

--------------------------------------------------------------------
Logic of stochastic qualifiers: deterministic/stages:
 - if an sblock is started, then is_stoch_model is set to true
 - if an sblock is closed, then is_stoch_model is set to false
 - deterministc/stages are read in as attributes to param/set/var/etc defs
 - their value is stored in global variables stages/is_deterministic
*/

stochblock: stochblockbegin LBRACE statements RBRACE {
               end_smodel(NULL);
               rem_indexing(NULL);
            }
          ;
    
/* FIXME: optionlist is of form '(ID COMMA ID ...)'
     need to call new SyntaxNode and addToListItem functions in the 
     processing of optionlist and its children */
stochblockbegin:  BLOCK ID indexing_opt STOCHASTIC USING LBRACKET 
                        setexpr_list RBRACKET COLON {
                     add_indexing($3);
                     begin_smodel((char*)$2, $3, $7);
                  }
               ;

/* -------------------------------------------------------------------- 
  stageblock
------------------------------------------------------------------------- */

stageblock: stageblock_start LBRACE statements RBRACE {
               stages_glo = NULL;
            }
/*          | stageblock_start statements END STAGE SEMICOLON {
               stages_glo = NULL;
            }*/
          ;

stageblock_start: STAGES setexpression COLON {              
                     if (!is_stoch_model) { 
                        cerr << "Syntax Error: keyword 'stages' can only be "
                        "used in stochastic blocks" << endl;
                        exit(1);
                     }
                     stages_glo = $2;
                  }
                ;

/* -------------------------------------------------------------------- 
  ``Standard'' AMPL
------------------------------------------------------------------------- */


statement:  setdef SEMICOLON 
			{                  
				YAC_MODEL_LOG("parsed setdef:"<<$1);
			}
         |  paramdef SEMICOLON
			{                  
				YAC_MODEL_LOG("parsed paramdef:"<<$1);
			}
         |  vardef SEMICOLON
			{                  
				YAC_MODEL_LOG("parsed vardef:"<<$1);
			}
         |  cnstr SEMICOLON
 			{                  
				YAC_MODEL_LOG("parsed cnstr:"<<$1);
			}
         |  block
         ;

/*  -------------------------------------------------------------------
 set def statement
 -------------------------------------------------------------------   */
setdef:	SET ID indexing_opt 
		{
			YAC_MODEL_LOG("setdef:[SET ID indexing_opt] - ID=["<<$2<<"] indexing_opt=["<<$3<<"]");
            if ($3) add_indexing($3);
        }
        stochattr_opt setattributes_opt 
        {
            YAC_MODEL_LOG("stochattr_opt=[" << $5<<"]");
            YAC_MODEL_LOG("setattributes_opt=[" <<$6<<"]");
            ModelComp *newmc;
            if (is_stoch_model){
               newmc = new StochModelComp($2, TSET, $3, $6);
               addStochInfo(newmc, $5);
            }else{
               newmc = new ModelComp($2, TSET, $3, $6);
            }
            current_model->addComp(newmc);
            if ($3) rem_indexing($3);
            $$=$2; 
        }
      ;
      
setattributes_opt:   /* empty */ { $$=NULL; }
                 |	setattributes_opt setattribute  
                 	{
                 		if($1!=NULL)
                 		{
                 			if($1->opCode != COMMA)
                 			{
                 				$1 = new SyntaxNode(COMMA,$1);
                 			}
                 			assert($2!=NULL);
                 			$1->push_back($2);
                 		}
                 		$$ = $1;
                 	}
                 ;
                 

setattribute: 	DIMEN INT_VAL 
				{
					$$ = new SyntaxNode(DIMEN, new ValueNode(*$2));
	           	}
            | 	WITHIN setexpression 
	            {
					$$ = new SyntaxNode(WITHIN, $2);
				}
            | 	ASSIGN setexpression 
           		{
					YAC_MODEL_LOG("setattribute: ASSIGN setexpression  -- "<<$2);
					$$ = new OpNode(ASSIGN, $2);
	           	}
            |  	DEFAULT setexpression 
            	{
                	$$ = new SyntaxNode(DEFAULT, $2);
               	}
            |  	ORDERED 
            	{ 
            		$$ = new SyntaxNode(ORDERED); 
            	}
            ;      

/*  -------------------------------------------------------------------
 param def statement
 -------------------------------------------------------------------   */
paramdef:  	PARAM ID indexing_opt {
				YAC_MODEL_LOG("paramdef: -- indexing_opt -- "<<$3);
               if ($3) add_indexing($3);
            } stochattr_opt paramattributes_opt {
               ModelComp *newmc;
               if (is_stoch_model){
               	  YAC_MODEL_LOG("paramdef: -- stochInfo --"<<$5);
                  StochModelComp *newmcs = new StochModelComp($2,TPARAM,$3,$6);
                  addStochInfo(newmcs, $5);
                  newmc = newmcs;
               }else{
               	  YAC_MODEL_LOG("create param comp - id["<<$3<<"]");
                  newmc = new ModelComp($2, TPARAM, $3, $6);
               }
               current_model->addComp(newmc);
               if ($3) rem_indexing($3);
               $$ = $2;
            }
        ;
        
paramattributes_opt: /* empty */ { $$ = NULL; }
                   | paramattribute paramattributes_opt
                   	 {
                   	 	if($2!=NULL)
                 		{
                 			if($1->opCode != COMMA)
                 			{
                 				$1 = new SyntaxNode(COMMA,$1);
                 			}
                 			$1->push_back($2);
                 		}
                 		$$ = $1;
                   	 }
                   	 
                   ;
                   
paramattribute:   BINARY {$$ = new SyntaxNode(BINARY);}
              |   INTEGER {$$ = new SyntaxNode(INTEGER);}
              |   SYMBOLIC {$$ = new SyntaxNode(SYMBOLIC);}
              |   relop expr {$$ = new OpNode($1, $2);}
              |   IN setexpression {$$ = new OpNode(IN, $2);}
              |   DEFAULT expr {$$ = new SyntaxNode(DEFAULT, $2);}
              |   DEFINED expr {$$ = new OpNode(DEFINED, $2);}
              ;
              

/*  -------------------------------------------------------------------
 var def statement
 -------------------------------------------------------------------   */
vardef:  VAR ID indexing_opt {
            if ($3) add_indexing($3);
         } stochattr_opt varattributes_opt {
            ModelComp *newmc;
            if (is_stoch_model){
               newmc = new StochModelComp($2, TVAR, $3, $6);
               addStochInfo(newmc, $5);
            }else{
               newmc = new ModelComp($2, TVAR, $3, $6);
            }

            current_model->addComp(newmc);
            if ($3) rem_indexing($3);
            $$=$2; 
         }
      ;
     
varattributes_opt:   /* empty */ {$$=NULL;}
                 |   varattributes {$$ = $1;}
                 ;


varattributes: varattribute 
			   {
					$$ = $1; 
               }
             | varattributes COMMA varattribute 
               {
               		if($1->opCode != COMMA)
               		{
               			$1 = new SyntaxNode(COMMA,$1);
               		}
             		$1->push_back($3);
             		$$ = $1;
               }
             ;

varattribute:  BINARY {$$ = new SyntaxNode(BINARY);}
            |  INTEGER {$$ = new SyntaxNode(INTEGER);}
            |  SYMBOLIC {$$ = new SyntaxNode(SYMBOLIC);}
            |  LE expr {$$ = new OpNode(LE, $2);}
            |  GE expr {$$ = new OpNode(GE, $2);}
            |  DEFINED expr {$$ = new OpNode(DEFINED, $2);}
            |  ASSIGN expr {$$ = new OpNode(ASSIGN, $2);}
            |  DEFAULT expr {$$ = new SyntaxNode(DEFAULT, $2);}
            |  IN setexpression {$$ = new OpNode(IN, $2);}
            |  SUFFIX ID expr {$$ = new SyntaxNode(SUFFIX, new IDNode($2), $3);}
            ;
     
/*  -------------------------------------------------------------------
 cnstr def statement
 -------------------------------------------------------------------   */     
cnstr: 	cnstr_type ID indexing_opt 
		{
        	if ($3) add_indexing($3);
        } 
		stochattr_opt COLON expr
		{
			ModelComp *newmc;
            if (is_stoch_model){
               newmc = new StochModelComp($2, $1, $3, $7);
               addStochInfo(newmc, $5);
            }else{
               newmc = new ModelComp($2, $1, $3, $7);
            }
            current_model->addComp(newmc);
            if ($3) rem_indexing($3);
			$$ =$2;
		}
	 ;

cnstr_type: MAXIMIZE  { $$ = TMAX;  }
		  | MINIMIZE  { $$ = TMIN;  }
		  | SUBJECTTO { $$ = TCON;  }
  		  ;
  		  
relop:   LE {$$=LE;}
     |   GE {$$=GE;}
     |   LT {$$=LT;}
     |   GT {$$=GT;}
     |   ASSIGN {$$=ASSIGN;}
     |   EQ {$$=EQ;}
     |   NE {$$=NE;}
     ;

indexing_opt: /* empty */ {		$$=NULL;	}
            | indexing { $$ = $1; }
            ;

indexing: LBRACE setexpr_list 
		{
			YAC_MODEL_LOG("indexing -- rule matched!");
			SyntaxNodeIx* indx = new SyntaxNodeIx(new SyntaxNode(LBRACE, $2));
			add_indexing(indx);
			$<opPtrIx>$ = indx;
		}
		indexing_condition RBRACE 
		{	
        	SyntaxNode *tmp = NULL;
      		if($4!=NULL)
           	{
           		tmp = new SyntaxNode(LBRACE, new SyntaxNode(COLON, $2, $4));
           	}
           	else
           	{
           		tmp = new SyntaxNode(LBRACE, $2);
           	}
           	rem_indexing($<opPtrIx>3);
           	$$ = new SyntaxNodeIx(tmp);
           	YAC_MODEL_LOG("indexing -- rule end");
		}
		;

indexing_condition: /* empty */ { $$=NULL; }
				  | COLON lexpr
				  	{
				  		$$=$2;
				  	}
				  	;
         

setexpr_list:  setexpr_item {  $$ = $1; }
            |  setexpr_list COMMA setexpr_item
            {
                  if ($1->opCode != COMMA)
                  {
                     $1 = new SyntaxNode(COMMA, $1);
                  }
                  $1->push_back($3);
                  $$ = $1;
			}
            ;

setexpr_item: setexpression {  $$ = $1; } 
            | mdim_dummy IN setexpression 
         	{
              	$$ = new OpNode(IN, $1, $3);
           	}
            ;

mdim_dummy: ID { $$ = new IDNode($1); }
		  | LBRACKET mdim_dummy_list RBRACKET { $$ = $2;}
		  ;
		  
mdim_dummy_list: ID { $$ = new IDNode($1); }
			   | mdim_dummy_list COMMA ID
			   {
			   		if($1->opCode != COMMA)
			   		{
			   			$1 = new SyntaxNode(COMMA,$1);
			   		}
			   		$1->push_back(new IDNode($3));
			   		$$ = $1;
			   }
			   ;
			   
/* this is anything that evaluates to a set */
setexpression: 
			 indexing {
					YAC_MODEL_LOG("setexpression: indexing -- "<<$1);
					$$= $1;
				}
			 | identifier {
	     		YAC_MODEL_LOG("setexpression: identifier -- rule matched");
	     		$$ = $1;
             }
			             
             | setexpression bsetop setexpression {
					$$ = new SyntaxNode($2, $1, $3);
               }
             | setexpression ubsetop setexpression {
                  	$$ = new SyntaxNode($2, $1, $3);
               }
             | expr DOTDOT expr {
					$$ = new SyntaxNode(DOTDOT,$1, $3);
               }
             | SETOF indexing
             	{ 
	         		YAC_MODEL_LOG("setexpression - setof --  "<<$2);
	         		add_indexing($2);
	         		$<opPtrIx>$ = $2;
	         	} identifier {
	         		$$ = new SyntaxNode(SETOF,$2,$4);
	         		rem_indexing($<opPtrIx>3);
	            }
             ;


lexpr:  expr IN setexpression {
			YAC_MODEL_LOG("lexpr: expr IN setexpression - rule matched! "<<$1<<" "<<$3);
			$$ = new OpNode(IN,$1,$3);
		}
     |  LBRACKET lexpr RBRACKET {
            $$ = $2; }
     |  lexpr blogic_op lexpr 
     	{
     		$$ = new SyntaxNode($2,$1,$3);
     	}
     |  ulogic_op lexpr
     	{
     		$$ = new SyntaxNode($1,$2);
     	}
     |  expr b_compare_op expr 
     	{
     		$$ = new SyntaxNode($2, $1, $3);
     	}
     ;
     
b_compare_op: NE { $$ = NE; }
			| LE { $$ = LE; }
			| GE { $$ = GE; }
			| LT { $$ = LT; }
			| GT { $$ = GT; }
			| EQ { $$ = EQ; }
			;
			
blogic_op: AND { $$ = AND; }
		| OR  {  $$ = OR; }
		;
ulogic_op: NOT  {  $$ = NOT; }
		;

stochattr_opt: /* empty */ {$$ = NULL;}
             | DETERMINISTIC {
                  // check that this is in a stochastic model
                  if (!is_stoch_model){ 
                     cerr << "Syntax Error: keyword 'DETERMINISTIC' can only"
                        "be used in stochastic blocks\n";
                     exit(1);
                  }
                  $$ = new SyntaxNode(DETERMINISTIC);
               }
             | STAGES setexpression {
                  // check that this is in a stochastic model
                  if (!is_stoch_model){ 
                     cerr << "Syntax Error: keyword 'STAGES' can only be used"
                        "in stochastic blocks\n";
                     exit(1);
                  }
                  $$ = $2;
               }
             ;

bsetop:  DIFF     { $$ = DIFF; }
      |  SYMDIFF  { $$ = SYMDIFF; }
      |  CROSS    { $$ = CROSS; }
      ;

ubsetop: UNION    { $$ = UNION; }
      |  INTER    { $$ = INTER; }
      ;
      

/* Identifier is any quotation of a predefined object:
    RoutComm[j].Flow[k-3*j, k]#
   An iditem is simply a tree of SyntaxNodes that serve as an identifier.
   An 'identifer' is a SyntaxNode of type IDREF or IDREFM.
*/
identifier: iditem {
               /* this is a simple identifier in global context */
               YAC_MODEL_LOG("identifier: iditem  -- "<<$1);
               $$ = SyntaxNode::find_var_ref_in_context(current_model, $1);
            }
          | identifier DOT iditem {
               /* identifier sets the context for the iditem:
                  The result of this is either a context setting or a
                  complete description of a variable.

                  Can implement this by simply adding context and argument lists
                
                  A variable reference should be represented internally as a
                  pointer to the referenced object in the model list
                  and a pointer to the list of arguments

                  This can be represented as a SyntaxNode with
                  ->opCode = ID;
                  ->nval = # of arguments
                  ->values[0] = pointer to entity in model list
                  ->values[1 - n] = arguments 

                  CONTEXT: iditems can be interpreted in two different contexts
                  1) is the global context (i.e. referring from the model
                     part that is currently defined)
                  2) is a local context that can be set by preceeding bits
                     of a dot'd expression. If a dot'd expression is 
                     parsed the flag 'local_context' should be set and 
                     'local_context' should be set to the current local
                     context. 
                  a context is expressed as a pointer to a model entity
               */
       
               /* identifier sets the context for the idem */
               /* this only works if the identifier is actually a reference 
                  to a submodel */

               if ($1->opCode != IDREFM) {
                  cerr << "Attempting to use dot specifier for something not an object:\n " << *($1) << "\n";
                  exit(1);
               }
               AmplModel* local_context = (((SyntaxNodeIDREF*)$1)->ref)->other;

               $$ = SyntaxNode::find_var_ref_in_context(local_context, $3);

               YAC_MODEL_LOG("Merge identifier:"<< *($1) <<"-----> iditem:"<<*($3));
               /* merge argument lists */
               $$->merge($1);
            }
          ;




iditem:  ID {                               /* simple identifier */
			YAC_MODEL_LOG("iditem : ID -- "<<$1);
            $$=new IDNode($1);
         }
      |  iditem LSBRACKET expr_list RSBRACKET { /* subscripted id'fier */
            YAC_MODEL_LOG("iditem: iditem LSBRACKET expr_list RSBRACKET --  "<<$1<<" ["<<$3<<"]");
            $$ = new SyntaxNode(LSBRACKET, $1, $3);
         } 
      |  ANCESTOR LBRACKET INT_VAL RBRACKET DOT iditem {
            // the same as above, just different syntax "ancestor(1).xh[i]"
            // => need to change the ID node in iditem into a binary node
            //    with INT_VAL ($3) as the second argument
   			assert(is_stoch_model==true);
            // iditem is either an ID or a LSBRACKET node
            SyntaxNode *node = $6;
            IDNode *idnode;
            if (node->opCode == LSBRACKET)
               idnode = (IDNode*) node->front();
            else
               idnode = (IDNode *) node;
            assert(idnode->opCode == ID);
            assert(idnode->getStochParent() == 0);
            idnode->setStochParent(*$3);
            $$ = $6;
         }
      ;

/* expr_list: is a comma separated list of expr's */
/* used as argument list to functions 
   RETURNS: 
   *SyntaxNode of type COMMA representing a linked list of items
*/

expr_list:  expr 
			{
				YAC_MODEL_LOG("expr_list: expr rule matched! "<<$1);
               	$$ = $1;
            }
         |  expr_list COMMA expr { 
               if($1->opCode != COMMA);
               {
               		$1 = new SyntaxNode(COMMA,$1);
               }
               $$ = $1->push_back($3);
            }
         ;

expr: value { YAC_MODEL_LOG("expr: value rule matched!" <<$1); }
    | LBRACKET expr_list RBRACKET { $$ = $2; }
    | expr '+' expr { $$ = new OpNode('+', $1, $3); }
    | expr '-' expr { $$ = new OpNode('-', $1, $3); }
    | '-' expr { $$ = new OpNode('-', $2); }
    | expr '*' expr { $$ = new OpNode('*', $1, $3); }
    | expr '/' expr { $$ = new OpNode('/', $1, $3); }
    | expr POWER expr { $$ = new OpNode(POWER, $1, $3); }
    | expr DOTDOT expr { $$ = new SyntaxNode(DOTDOT, $1, $3); }
    | expr ASSIGN expr {	$$ = new OpNode(ASSIGN, $1, $3); }
    | reduction_op indexing 
      {	add_indexing($2);} 
      LBRACKET expr RBRACKET 
      {   
      	/*feng - need a bracket to handle current indexing? eg. sum{}(expr) - sum{}(expr) vs sum{}(expr - sum{}(expr))*/
        /* reduction operator: do we need to keep track of the ID of the dummy variable(s)? */
      	$$ = new SyntaxNode($1, $2, $5);
      	rem_indexing($2);
      }
    | IF lexpr THEN expr { $$ = new SyntaxNode(IF, $2, $4); }
    | IF lexpr THEN expr ELSE expr { $$ = new SyntaxNode(IF, $2, $4, $6); }
    | FIRST LBRACKET setexpression RBRACKET { $$ = new SyntaxNode(FIRST, $3); }
    | LAST LBRACKET setexpression RBRACKET { $$ = new SyntaxNode(LAST, $3); }
    | EXPECTATION LBRACKET expr_list RBRACKET 
      { 
      	$$ = new SyntaxNode(EXPECTATION, $3);
      }
    | func_op LBRACKET expr_list RBRACKET 
      { 
      	$$ = new SyntaxNode($1, $3);
      }
    ;

func_op : ORD  { $$=ORD;   }
     | CARD { $$=CARD;  }
     | SIN  { $$ = SIN; }
     | COS  { $$ = COS; }
     ;

reduction_op:  SUM { $$=SUM; }
            |  MAX { $$=MAX; }
            |  MIN { $$=MIN; }
            |  PROD { $$=PROD; }
            ;

value:   INT_VAL {
            $$=new ValueNode(*$1);
         }
     |   FLOAT_VAL { 
            $$=new ValueNode(*$1);
         }
     |   identifier { 
     		YAC_MODEL_LOG("value: identifier rule matched! "<<$1->print());
            $$=$1;
         }
     |   INFINITE { 
            $$ = new SyntaxNode(INFINITE);
         }
     ;

%%

void yyerror(const char *s) {
   cerr << "MODEL: " << s << " on line " << yylineno << "\n";
   //fprintf(stderr, "%s\n", s);
}


/* ----------------------------------------------------------------------------
yywrap
---------------------------------------------------------------------------- */
/* not sure if this is correct, found this somewhere on the internet
   should open the data file and somehow tell the parser to carry on 
   reading in "data mode"

 */
int yywrap(void) {
   return 1;
}

/* ----------------------------------------------------------------------------
begin_model
---------------------------------------------------------------------------- */
void begin_model(char *name, SyntaxNodeIx *indexing) 
{
	YAC_MODEL_LOG("begin_model  ["<< name <<"] indexing["<<indexing->print()<<"]");
	AmplModel *new_mod = new AmplModel(name,current_model);
	
	/* FIXME: include attrib in definition */
	ModelComp* newmc = new ModelComp(name, TMODEL, indexing, NULL);
	newmc->other = new_mod;
	
	new_mod->node = newmc;            /* add pointer-to-node to the model */
	current_model->addComp(newmc);
	  
	/* and change current model */
	current_model = new_mod;
}

/* ----------------------------------------------------------------------------
begin_smodel
---------------------------------------------------------------------------- */
void begin_smodel(char *name, SyntaxNodeIx *indexing, SyntaxNode *stochsets) 
{
   LOG_SM("Start Stochastic Model: " << name <<"indexing ["<<indexing->print()<<"]");
   if (!stochsets || stochsets->nchild()!=4){
      cerr << "Syntax error in Stochastic Block definition: \n";
      cerr << " 'USING' needs 4 parameters \n";
      exit(1);
   }

   SyntaxNode::iterator i = stochsets->begin();
   SyntaxNode *nodes = *i;
   SyntaxNode *anc = *(++i);
   SyntaxNode *prob = *(++i);
   SyntaxNode *stages = *(++i);
   LOG("   anc = [" << anc << endl << "]   prob = [" << prob<<"]"<< "   stages = [" << stages<<"]");
   StochModel* new_mod = new StochModel(name, stages, nodes, anc, prob, current_model);
  
   /* Fixme: include attrib in definition */
   ModelComp* newmc = new ModelComp(name, TMODEL, indexing, NULL);
   newmc->other = new_mod;

   new_mod->node = newmc;            /* add pointer-to-node to the model */
   current_model->addComp(newmc);
 
   /* and change current model */
   current_model = new_mod;
   is_stoch_model = true;
}

/* ----------------------------------------------------------------------------
end_model
---------------------------------------------------------------------------- */
void end_model(char *name) 
{
	YAC_MODEL_LOG("end_model -- ["<<current_model->name<<"]");
	// Check end block name matches block name
	if (name && string(name) != current_model->name) {
		cerr << "end block '" << name << "' encountered in block '" << 
		current_model->name << "'" << endl;
		exit(1);
	}
	current_model = current_model->parent;
	assert(current_model!=NULL);
}

/* ----------------------------------------------------------------------------
end_smodel
---------------------------------------------------------------------------- */
void end_smodel(char *name){
  // current_model is a StochModel -> convert this into a tree a FlatModels

  // Check end block name matches block name
  if (name && name != current_model->name) {
    cerr << "end stochastic block '" << name << "' encountered in stochastic "
      "block '" << current_model->name << "'" << endl;
    exit(1);
  }

  // this is the ModelComp pointing to the StochModel
  ModelComp *mc = current_model->node; 
  
  // point that to the expanded flat model tree
  mc->other = current_model->expandToFlatModel();

  // and change the name of the ModelComp of this model to the name of the 
  // new (AmplModel) model. 
  // (this is a concatenation of the StochModel name and the name of the 
  // first stage)
  mc->id = mc->other->name;

  // and go back to the parent 
  current_model = current_model->parent;
  is_stoch_model = false;
  
  assert(AmplModel::root == current_model);
  //AmplModel::root->isStochastic = true;
}

/* ------------------------------------------------------------------------
add_indexing/rem_indexing
-------------------------------------------------------------------------- */
void  add_indexing(SyntaxNodeIx *indexing){
   YAC_MODEL_LOG("add_indexing -- indexing:["<< *indexing<<"] "<<SyntaxNode::print_SyntaxNodesymb(indexing));
   list_of_indexing[n_indexing] = indexing;
   YAC_MODEL_LOG("[add_index] - length of indexing now: " << n_indexing+1);
   n_indexing++;
}

void rem_indexing(SyntaxNodeIx *indexing){
	YAC_MODEL_LOG("rem_indexing -- " << *indexing);
	if (indexing){
    	assert(indexing==list_of_indexing[n_indexing-1]);
   	}
	n_indexing--;
   	YAC_MODEL_LOG("rem_indexing --  length now[" << n_indexing<<"]" );
}

/* ---------------------------------------------------------------------------
Stochastic model helper functions
---------------------------------------------------------------------------- */
void addStochInfo(ModelComp *newmcs, SyntaxNode *stochopt) {
   if(stochopt) {
     bool isDet = stochopt->opCode == DETERMINISTIC;
     YAC_MODEL_LOG("isDet["<<isDet<<"] is_deterministic_glo["<<is_deterministic_glo<<"]");
     newmcs->setDeterministic(isDet || is_deterministic_glo);
     newmcs->setStageSetNode(isDet ? stages_glo : stochopt);
   } else {
      newmcs->setDeterministic(is_deterministic_glo);
      newmcs->setStageSetNode(stages_glo);
   }
}

//yyin opened,and readable
int parse_model() 
{
	int errcode = 0;
	yyin = fopen(GlobalVariables::modelfilename.c_str(),"r");
	assert(errcode==0);
   	AmplModel::root = new AmplModel("root",NULL);
   	current_model = AmplModel::root;
   	is_stoch_model = false;
   	is_deterministic_glo = false;
   	stages_glo = NULL;

	YAC_MODEL_LOG("starting model parser.... ");
   	errcode = yyparse();
   	assert(errcode==0);
   	YAC_MODEL_LOG("model parser finished !");
   	
   	fclose(yyin);
   	assert(errcode==0);
	return errcode;
}
